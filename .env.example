# Environment Configuration Examples
# Copy this file to .env and customize for your environment

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================
APP_NAME="FastAPI LLM Backend"
APP_TITLE= "FastAPI LLM Backend"
APP_DESCRIPTION="A production-ready FastAPI backend template with LLM integration"
APP_VERSION=0.1.2
ENVIRONMENT=development
DEBUG=true
HOST=0.0.0.0
PORT=8000

# =============================================================================
# CORS CONFIGURATION
# =============================================================================
# IMPORTANT: Environment files only support string values, not arrays!
# Lists should be comma-separated strings (no brackets, no quotes)

# CORS methods - comma-separated HTTP methods  
CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS
# Or allow all methods:
# CORS_METHODS=*

# CORS origins - comma-separated URLs (no spaces around commas)
CORS_ORIGINS=http://localhost:3000,http://localhost:8000,https://yourdomain.com
# For development, you can use wildcard (be careful in production!)
# CORS_ORIGINS=*

# CORS headers - use "*" for all headers or specify comma-separated list
CORS_HEADERS=*
# Or specific headers:
# CORS_HEADERS=Content-Type,Authorization,X-Requested-With

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# Select database backend (async drivers required)
#   - sqlite+aiosqlite (default for local dev)
#   - postgresql+asyncpg
#   - mysql+aiomysql
# DATABASE_SERVICE=sqlite+aiosqlite

# SQLite (Development) - Default
# DATABASE_URL=sqlite+aiosqlite:///./app.db
# DATABASE_ECHO=true

# DATABASE_PORT=5432  # Default PostgreSQL port
# DATABASE_HOST=localhost
# DATABASE_NAME=app_db
# DATABASE_USER=db_user
# DATABASE_PASSWORD=your_password
# DATABASE_ROOT_PASSWORD=your_root_password

# PostgreSQL (Recommended for Production)
# DATABASE_URL=postgresql+asyncpg://username:password@localhost:5432/dbname
# DATABASE_POOL_SIZE=20
# DATABASE_MAX_OVERFLOW=30
# DATABASE_POOL_TIMEOUT=30
# DATABASE_POOL_RECYCLE=3600

# MySQL (Alternative for Production)
# DATABASE_URL=mysql+aiomysql://username:password@localhost:3306/dbname
# DATABASE_POOL_SIZE=20
# DATABASE_MAX_OVERFLOW=30
# DATABASE_POOL_TIMEOUT=30
# DATABASE_POOL_RECYCLE=3600
# DATABASE_MYSQL_CHARSET=utf8mb4
# DATABASE_MYSQL_COLLATION=utf8mb4_unicode_ci

# =============================================================================
# CELERY & REDIS CONFIGURATION
# =============================================================================

# Celery broker and result backend
# For local development, Redis on localhost. In Docker, the hostname is 'redis'.
# CELERY_BROKER_URL=redis://localhost:6379/0
# CELERY_RESULT_BACKEND=redis://localhost:6379/1

# Enable remote debugging for Celery worker (1 to enable)
# DEBUG_CELERY=0

# Redis port (used by docker-compose for both host and container)
# REDIS_PORT=6379

# Flower monitoring UI port (used by docker-compose for both host and container)
# FLOWER_PORT=5555

# =============================================================================
# LLM CONFIGURATION
# =============================================================================

# Provider API keys (used by llm_config.yaml providers.api_key_env)
# OPENAI_API_KEY=
# CUSTOM_LLM_API_KEY=

# Task model overrides (used by llm_config.yaml settings.env_overrides)
# LLM_EXPLAIN_MODEL=gpt-5-mini
# LLM_CONVERSATION_MODEL=gpt-5-mini

# =============================================================================
# SENTRY CONFIGURATION
# =============================================================================
# SENTRY_DSN=https://your-sentry-dsn
# SENTRY_TRACES_SAMPLE_RATE=0.1  # Adjust based on your needs (0.0 to 1.0)
# SENTRY_PROFILES_SAMPLE_RATE=0.1  # Adjust based on your needs (0.0 to 1.0)