name: ${APP_NAME:-backend-template}

services:
  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: ${APP_NAME:-backend-template}-api
    restart: unless-stopped
    command:
      [
        'fastapi',
        'run',
        '--port',
        '${PORT:-8000}',
        '--host',
        '${HOST:-0.0.0.0}',
      ]
    ports:
      - '${PORT:-8000}:${PORT:-8000}'
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      APP_NAME: ${APP_NAME:-backend-template}
      APP_DESCRIPTION: ${APP_DESCRIPTION:-FastAPI Application}
      APP_VERSION: ${APP_VERSION:-1.0.0}
  CELERY_BROKER_URL: redis://redis:${REDIS_PORT:-6379}/0
  CELERY_RESULT_BACKEND: redis://redis:${REDIS_PORT:-6379}/1
    networks:
      - app-network
    volumes:
      - app_logs:/app/logs

  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: ${APP_NAME:-backend-template}-celery-worker
    restart: unless-stopped
    command: >
      sh -c "poetry run celery -A app.celery.celery_main:celery_app worker 
             --loglevel=info 
             --queues=default,llm_tasks
             --hostname=worker@%h 
             --max-tasks-per-child=100 
             --time-limit=300 
             --soft-time-limit=240"
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
  CELERY_BROKER_URL: redis://redis:${REDIS_PORT:-6379}/0
  CELERY_RESULT_BACKEND: redis://redis:${REDIS_PORT:-6379}/1

    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - app_logs:/app/logs

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: ${APP_NAME:-backend-template}-redis
    restart: unless-stopped
    ports:
      - '${REDIS_PORT:-6379}:${REDIS_PORT:-6379}'
    command: redis-server --appendonly yes --port ${REDIS_PORT:-6379}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
  test: ['CMD', 'redis-cli', '-p', '${REDIS_PORT:-6379}', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # Flower Monitoring
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: ${APP_NAME:-backend-template}-flower
    restart: unless-stopped
    command: >
      sh -c "poetry run celery -A app.celery.celery_main:celery_app flower 
        --port=${FLOWER_PORT:-5555}
        --broker_api=redis://redis:${REDIS_PORT:-6379}/0"
    ports:
      - '${FLOWER_PORT:-5555}:${FLOWER_PORT:-5555}'
    environment:
      CELERY_BROKER_URL: redis://redis:${REDIS_PORT:-6379}/0
      CELERY_RESULT_BACKEND: redis://redis:${REDIS_PORT:-6379}/1
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
    name: ${APP_NAME:-backend-template}-network

volumes:
  app_logs:
    driver: local
  redis_data:
    driver: local
